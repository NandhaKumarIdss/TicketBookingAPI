// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace TicketBooking.Data.Migrations
{
    [DbContext(typeof(TicketBooking.Data.TicketBookingDbContext.TicketBookingDbContext))]
    [Migration("20230513163707_Changes")]
    partial class Changes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicketBooking.Entities.BookingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookingId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HallSeatId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("HallSeatId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingDetail", "dbo");
                });

            modelBuilder.Entity("TicketBooking.Entities.BookingMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("HallId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingMaster", "dbo");
                });

            modelBuilder.Entity("TicketBooking.Entities.EventHall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HallName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("HallStatus")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EventHall", "dbo");
                });

            modelBuilder.Entity("TicketBooking.Entities.HallSeats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HallId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SeatColumn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeatRow")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SeatStatus")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("UserId");

                    b.ToTable("HallSeats", "dbo");
                });

            modelBuilder.Entity("TicketBooking.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("TicketBooking.Entities.BookingDetail", b =>
                {
                    b.HasOne("TicketBooking.Entities.BookingMaster", "BookingMasters")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketBooking.Entities.HallSeats", "HallSeats")
                        .WithMany("BookingDetails")
                        .HasForeignKey("HallSeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketBooking.Entities.Users", "Users")
                        .WithMany("BookingDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookingMasters");

                    b.Navigation("HallSeats");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketBooking.Entities.BookingMaster", b =>
                {
                    b.HasOne("TicketBooking.Entities.EventHall", "EventHall")
                        .WithMany("BookingMasters")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketBooking.Entities.Users", "Users")
                        .WithMany("BookingMasters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventHall");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketBooking.Entities.EventHall", b =>
                {
                    b.HasOne("TicketBooking.Entities.Users", "Users")
                        .WithMany("EventHalls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketBooking.Entities.HallSeats", b =>
                {
                    b.HasOne("TicketBooking.Entities.EventHall", "EventHall")
                        .WithMany("HallSeats")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketBooking.Entities.Users", "Users")
                        .WithMany("HallSeats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventHall");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketBooking.Entities.BookingMaster", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("TicketBooking.Entities.EventHall", b =>
                {
                    b.Navigation("BookingMasters");

                    b.Navigation("HallSeats");
                });

            modelBuilder.Entity("TicketBooking.Entities.HallSeats", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("TicketBooking.Entities.Users", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("BookingMasters");

                    b.Navigation("EventHalls");

                    b.Navigation("HallSeats");
                });
#pragma warning restore 612, 618
        }
    }
}
